{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from 'react'; //# Create React Context -use React Context to save Cart Items \n// in a Global State and use it in Components\n// #1 - Create Store\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext(); // define Initial State\n\nconst initialState = {\n  cart: {\n    // if cartItems exist in a localStorage\n    cartItems: localStorage.getItem('cartItems') ? // use JSON.parse to convert cartItems string to javaScript object \n    JSON.parse(localStorage.getItem('cartItems')) // otherwise, set it to empty array\n    : [],\n    // if userInfo exist in a localStorage\n    userInfo: localStorage.getItem('userInfo') // use JSON.parse to convert userInfo string to javaScript object \n    ? JSON.parse(localStorage.getItem('userInfo')) // otherwise, set it to null\n    : null\n  }\n}; // define reducer\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CART_ADD_ITEM':\n      {\n        // new item\n        const newItem = action.payload; // exist item\n\n        const existItem = state.cart.cartItems.find(item => item._id === newItem._id); // cart items\n\n        const cartItems = existItem ? //true\n        state.cart.cartItems.map(item => item.name === existItem.name ? //true\n        newItem : //false\n        item) : // false\n        [...state.cart.cartItems, // keep all values in the field\n        newItem // new item    \n        ]; // save items in localStorage\n        // convert cartItems to a string and save them in the cart items\n\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        return { ...state,\n          // keep all values in the field\n          cart: { ...state.cart,\n            // keep all values in the Cart Object state\n            cartItems // update cartItems\n\n          }\n        };\n      }\n\n    case 'CART_REMOVE_ITEM':\n      {\n        // cartItems - filter out item that i passed as action.payload\n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id); // save items in localStorage\n        // convert cartItems to a string and save them in the cart items\n\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        return { ...state,\n          // keep all values in the field\n          cart: { ...state.cart,\n            // keep all values in the Cart Object state\n            cartItems // update cartItems\n\n          }\n        };\n      }\n\n    case 'USER_SIGNIN':\n      return { ...state,\n        // keep the previous state\n        userInfo: action.payload // update user info\n\n      };\n\n    case 'USER_SIGNOUT':\n      return { ...state,\n        // keep the previous state\n        userInfo: null // set userInfo to null\n\n      };\n\n    case 'SAVE_SHIPPING_ADDRESS':\n      return { ...state,\n        // keep the previous state\n        cart: { ...state.cart,\n          // keep the previous cart state\n          shippingAddress: { ...state.cart.shippingAddress,\n            ...action.payload\n          }\n        }\n      };\n\n    default:\n      // current state\n      return state;\n  }\n} // #2 - Store Provider - it's a Wrapper for our React Application\n// pass global props to children\n\n\nexport function StoreProvider(props) {\n  _s();\n\n  // define useReducer\n  const [state, dispatch] = useReducer(reducer, initialState); //define value object\n\n  const value = {\n    state,\n    // current state\n    dispatch // action to update state in the context\n\n  };\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 12\n  }, this);\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"sources":["/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js"],"names":["createContext","useReducer","Store","initialState","cart","cartItems","localStorage","getItem","JSON","parse","userInfo","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","name","setItem","stringify","filter","shippingAddress","StoreProvider","props","dispatch","value","children"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from 'react';\n\n//# Create React Context -use React Context to save Cart Items \n// in a Global State and use it in Components\n\n// #1 - Create Store\nexport const Store = createContext();\n\n// define Initial State\nconst initialState = {\n    cart: {\n        // if cartItems exist in a localStorage\n        cartItems: localStorage.getItem('cartItems') ? \n        // use JSON.parse to convert cartItems string to javaScript object \n        JSON.parse(localStorage.getItem('cartItems')) \n        // otherwise, set it to empty array\n        :[], \n\n        // if userInfo exist in a localStorage\n        userInfo: localStorage.getItem('userInfo')\n        // use JSON.parse to convert userInfo string to javaScript object \n        ? JSON.parse(localStorage.getItem('userInfo'))\n        // otherwise, set it to null\n        : null,\n    }\n}\n\n// define reducer\nfunction reducer(state, action){\n    switch(action.type){\n        case 'CART_ADD_ITEM': {\n            // new item\n            const newItem = action.payload;\n            \n            // exist item\n            const existItem = state.cart.cartItems.find(\n              (item) => item._id === newItem._id\n            );\n      \n            // cart items\n            const cartItems = existItem ? //true\n            state.cart.cartItems.map(\n                (item) => item.name === existItem.name ? //true\n            newItem : //false\n            item ) : // false\n            [ ...state.cart.cartItems, // keep all values in the field\n              newItem // new item    \n            ];\n\n            // save items in localStorage\n            // convert cartItems to a string and save them in the cart items\n            localStorage.setItem(   'cartItems', \n                                    JSON.stringify(cartItems)\n                                                                );\n\n            return { ...state, // keep all values in the field\n                     cart: { \n                     ...state.cart, // keep all values in the Cart Object state\n                     cartItems // update cartItems\n                   } \n                  };\n        }\n        case 'CART_REMOVE_ITEM': \n        {\n            // cartItems - filter out item that i passed as action.payload\n            const cartItems = state.cart.cartItems.filter(\n              (item) => item._id !== action.payload._id\n            );\n            \n            // save items in localStorage\n            // convert cartItems to a string and save them in the cart items\n            localStorage.setItem( 'cartItems', \n                                  JSON.stringify(cartItems)\n                                                                );\n\n        return { \n                ...state, // keep all values in the field\n                cart: { \n                        ...state.cart, // keep all values in the Cart Object state\n                        cartItems // update cartItems\n                } \n            };\n        }\n        case 'USER_SIGNIN':\n          return { \n              ...state,  // keep the previous state\n              userInfo: action.payload // update user info\n            };  \n        case 'USER_SIGNOUT':\n            return{\n              ...state, // keep the previous state\n              userInfo: null // set userInfo to null\n            };    \n        case 'SAVE_SHIPPING_ADDRESS':\n          return {\n            ...state, // keep the previous state\n            cart: {\n              ...state.cart, // keep the previous cart state\n              shippingAddress: {\n                ...state.cart.shippingAddress,\n                ...action.payload,\n              },\n            },\n          };\n            default:\n            // current state\n            return state;\n    }\n}\n\n// #2 - Store Provider - it's a Wrapper for our React Application\n// pass global props to children\nexport function StoreProvider(props){\n    // define useReducer\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    //define value object\n    const value = {\n        state, // current state\n        dispatch // action to update state in the context\n    };\n\n    return <Store.Provider value={value}>\n        {props.children}\n    </Store.Provider>\n}"]},"metadata":{},"sourceType":"module"}