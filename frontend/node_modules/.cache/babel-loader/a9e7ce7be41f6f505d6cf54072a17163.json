{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from 'react'; //# Create React Context -use React Context to save Cart Items \n// in a Global State and use it in Components\n// #1 - Create Store\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext(); // define Initial State\n\nconst initialState = {\n  cart: {\n    cartItems: [] // by default there is no items in the shopping cart\n\n  }\n}; // define reducer\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CART_ADD_ITEM':\n      {\n        // new item\n        const newItem = action.payload; // exist item\n\n        const existItem = state.cart.cartItems.find(item => item._id === newItem._id); // cart items\n\n        const cartItems = existItem ? state.cart.cartItems.map(item => item.name === existItem.name ? newItem : item) : [...state.cart.cartItems, newItem];\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        return { ...state,\n          // keep all values in the field\n          cart: { ...state.cart,\n            // keep all values in the Cart Object state\n            cartItems // update cartItems\n\n          }\n        };\n      }\n\n    case 'CART_REMOVE_ITEM':\n      {\n        // cartItems - filter out item that i passed \n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id);\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        return { ...state,\n          // keep all values in the field\n          cart: { ...state.cart,\n            // keep all values in the Cart Object state\n            cartItems // update cartItems\n\n          }\n        };\n      }\n\n    default:\n      // current state\n      return state;\n  }\n} // #2 - Store Provider - it's a Wrapper for our React Application\n// pass global props to children\n\n\nexport function StoreProvider(props) {\n  _s();\n\n  // define useReducer\n  const [state, dispatch] = useReducer(reducer, initialState); //define value object\n\n  const value = {\n    state,\n    // current state\n    dispatch // action to update state in the context\n\n  };\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"sources":["/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js"],"names":["createContext","useReducer","Store","initialState","cart","cartItems","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","name","localStorage","setItem","JSON","stringify","filter","StoreProvider","props","dispatch","value","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C,C,CAEA;AACA;AAEA;;;AACA,OAAO,MAAMC,KAAK,gBAAGF,aAAa,EAA3B,C,CAEP;;AACA,MAAMG,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAG,EADV,CACc;;AADd;AADW,CAArB,C,CAMA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAC3B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACA;AACI;AACA,cAAMC,OAAO,GAAGF,MAAM,CAACG,OAAvB,CAFJ,CAII;;AACA,cAAMC,SAAS,GAAGL,KAAK,CAACH,IAAN,CAAWC,SAAX,CAAqBQ,IAArB,CACfC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,OAAO,CAACK,GADf,CAAlB,CALJ,CASI;;AACA,cAAMV,SAAS,GAAGO,SAAS,GACvBL,KAAK,CAACH,IAAN,CAAWC,SAAX,CAAqBW,GAArB,CAA0BF,IAAD,IACvBA,IAAI,CAACG,IAAL,KAAcL,SAAS,CAACK,IAAxB,GAA+BP,OAA/B,GAAyCI,IAD3C,CADuB,GAIvB,CAAC,GAAGP,KAAK,CAACH,IAAN,CAAWC,SAAf,EAA0BK,OAA1B,CAJJ;AAKAQ,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAehB,SAAf,CAAlC;AACA,eAAO,EAAE,GAAGE,KAAL;AAAY;AACVH,UAAAA,IAAI,EAAE,EACN,GAAGG,KAAK,CAACH,IADH;AACS;AACfC,YAAAA,SAFM,CAEI;;AAFJ;AADR,SAAP;AAKH;;AACD,SAAK,kBAAL;AAAyB;AACrB;AACA,cAAMA,SAAS,GAAGE,KAAK,CAACH,IAAN,CAAWC,SAAX,CAAqBiB,MAArB,CACfR,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeI,GADtB,CAAlB;AAGAG,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAehB,SAAf,CAAlC;AACA,eAAO,EACC,GAAGE,KADJ;AACW;AACVH,UAAAA,IAAI,EAAE,EACE,GAAGG,KAAK,CAACH,IADX;AACiB;AACfC,YAAAA,SAFF,CAEY;;AAFZ;AAFP,SAAP;AAOD;;AACH;AACI;AACA,aAAOE,KAAP;AAxCR;AA0CH,C,CAED;AACA;;;AACA,OAAO,SAASgB,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AAChC;AACA,QAAM,CAACjB,KAAD,EAAQkB,QAAR,IAAoBxB,UAAU,CAACK,OAAD,EAAUH,YAAV,CAApC,CAFgC,CAIhC;;AACA,QAAMuB,KAAK,GAAG;AACVnB,IAAAA,KADU;AACH;AACPkB,IAAAA,QAFU,CAED;;AAFC,GAAd;AAKA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEC,KAAvB;AAAA,cACFF,KAAK,CAACG;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH;;GAbeJ,a;;KAAAA,a","sourcesContent":["import { createContext, useReducer } from 'react';\n\n//# Create React Context -use React Context to save Cart Items \n// in a Global State and use it in Components\n\n// #1 - Create Store\nexport const Store = createContext();\n\n// define Initial State\nconst initialState = {\n    cart: {\n        cartItems : [], // by default there is no items in the shopping cart\n    }\n}\n\n// define reducer\nfunction reducer(state, action){\n    switch(action.type){\n        case 'CART_ADD_ITEM': \n        {\n            // new item\n            const newItem = action.payload;\n            \n            // exist item\n            const existItem = state.cart.cartItems.find(\n              (item) => item._id === newItem._id\n            );\n      \n            // cart items\n            const cartItems = existItem\n              ? state.cart.cartItems.map((item) =>\n                  item.name === existItem.name ? newItem : item\n                )\n              : [...state.cart.cartItems, newItem];\n            localStorage.setItem('cartItems', JSON.stringify(cartItems));\n            return { ...state, // keep all values in the field\n                     cart: { \n                     ...state.cart, // keep all values in the Cart Object state\n                     cartItems // update cartItems\n        } };\n        }\n        case 'CART_REMOVE_ITEM': {\n            // cartItems - filter out item that i passed \n            const cartItems = state.cart.cartItems.filter(\n              (item) => item._id !== action.payload._id\n            );\n            localStorage.setItem('cartItems', JSON.stringify(cartItems));\n            return { \n                    ...state, // keep all values in the field\n                    cart: { \n                            ...state.cart, // keep all values in the Cart Object state\n                            cartItems // update cartItems\n                        } \n                    };\n          }\n        default:\n            // current state\n            return state;\n    }\n}\n\n// #2 - Store Provider - it's a Wrapper for our React Application\n// pass global props to children\nexport function StoreProvider(props){\n    // define useReducer\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    //define value object\n    const value = {\n        state, // current state\n        dispatch // action to update state in the context\n    };\n\n    return <Store.Provider value={value}>\n        {props.children}\n    </Store.Provider>\n}"]},"metadata":{},"sourceType":"module"}