{"ast":null,"code":"import _slicedToArray from\"/home/carlos/Documents/GitHub/mern-ecommerce/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectSpread from\"/home/carlos/Documents/GitHub/mern-ecommerce/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/carlos/Documents/GitHub/mern-ecommerce/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{createContext,useReducer}from'react';// import logger from 'use-reducer-logger';\n// i wanna use react context to save the cart items in a global state\n// and use it in Components\n// Create Store\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var Store=/*#__PURE__*/createContext();// define initialState\nvar initialState={cart:{cartItems:localStorage.getItem('cartItems')?JSON.parse(localStorage.getItem('cartItems')):[],shippingAddress:localStorage.getItem('shippingAddress')?JSON.parse(localStorage.getItem('shippingAddress')):{location:{}},paymentMethod:localStorage.getItem('paymentMethod')?localStorage.getItem('paymentMethod'):''},userInfo:localStorage.getItem('userInfo')?JSON.parse(localStorage.getItem('userInfo')):null};// define reducer\nfunction reducer(state,action){switch(action.type){case'CART_ADD_ITEM':{// new item\nvar newItem=action.payload;// exist item\nvar existItem=state.cart.cartItems.find(function(item){return item._id===newItem._id;});// cart items\nvar cartItems=existItem?state.cart.cartItems.map(function(item){return item.name===existItem.name?newItem:item;}):[].concat(_toConsumableArray(state.cart.cartItems),[newItem]);localStorage.setItem('cartItems',JSON.stringify(cartItems));// keep all values in the field ...state\n// keep all values in the Cart Object in the state ...state.cart\n// update cartItems\nreturn _objectSpread(_objectSpread({},state),{},{cart:_objectSpread(_objectSpread({},state.cart),{},{cartItems:cartItems})});}case'CART_REMOVE_ITEM':{var _cartItems=state.cart.cartItems.filter(function(item){return item._id!==action.payload._id;});localStorage.setItem('cartItems',JSON.stringify(_cartItems));return _objectSpread(_objectSpread({},state),{},{cart:_objectSpread(_objectSpread({},state.cart),{},{cartItems:_cartItems})});}case'SAVE_SHIPPING_ADDRESS':return _objectSpread(_objectSpread({},state),{},{cart:_objectSpread(_objectSpread({},state.cart),{},{shippingAddress:_objectSpread(_objectSpread({},state.cart.shippingAddress),action.payload)})});case'SAVE_SHIPPING_ADDRESS_MAP_LOCATION':return _objectSpread(_objectSpread({},state),{},{cart:_objectSpread(_objectSpread({},state.cart),{},{shippingAddress:_objectSpread(_objectSpread({},state.cart.shippingAddress),{},{location:action.payload})})});case'SAVE_PAYMENT_METHOD':return _objectSpread(_objectSpread({},state),{},{cart:_objectSpread(_objectSpread({},state.cart),{},{paymentMethod:action.payload})});case'CART_CLEAR':return _objectSpread(_objectSpread({},state),{},{cart:_objectSpread(_objectSpread({},state.cart),{},{cartItems:[]})});case'USER_SIGNIN':return _objectSpread(_objectSpread({},state),{},{userInfo:action.payload});case'USER_SIGNOUT':return _objectSpread(_objectSpread({},state),{},{userInfo:null,cart:{cartItems:[],shippingAddress:{location:{}},paymentMethod:''}});default:return state;}}// StoreProvider - is a Wrapper for React App and pass global props to children\nexport function StoreProvider(props){// define useReducer\nvar _useReducer=useReducer(//process.env.NODE_ENV === 'development' ? logger(reducer) : reducer,\nreducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// define value object\n// the value contain current state in the context and \n// the dispatch to update state in the context\nvar value={state:state,dispatch:dispatch};// return Store ( is comming from react context )\n// get Provider from the Store object\n// render {props.children}\nreturn/*#__PURE__*/_jsx(Store.Provider,{value:value,children:props.children});}","map":{"version":3,"sources":["/home/carlos/Documents/GitHub/mern-ecommerce/frontend/src/Store.js"],"names":["createContext","useReducer","Store","initialState","cart","cartItems","localStorage","getItem","JSON","parse","shippingAddress","location","paymentMethod","userInfo","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","name","setItem","stringify","filter","StoreProvider","props","dispatch","value","children"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from 'react';\n// import logger from 'use-reducer-logger';\n\n// i wanna use react context to save the cart items in a global state\n// and use it in Components\n\n// Create Store\nexport const Store = createContext();\n\n// define initialState\nconst initialState = {\n  cart: {\n    cartItems: localStorage.getItem('cartItems')\n      ? JSON.parse(localStorage.getItem('cartItems'))\n      : [],\n    shippingAddress: localStorage.getItem('shippingAddress')\n      ? JSON.parse(localStorage.getItem('shippingAddress'))\n      : { location: {} },\n    paymentMethod: localStorage.getItem('paymentMethod')\n      ? localStorage.getItem('paymentMethod')\n      : '',\n  },\n  userInfo: localStorage.getItem('userInfo')\n    ? JSON.parse(localStorage.getItem('userInfo'))\n    : null,\n};\n\n// define reducer\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CART_ADD_ITEM': {\n\n      // new item\n      const newItem = action.payload;\n      \n\n      // exist item\n      const existItem = state.cart.cartItems.find(\n        (item) => item._id === newItem._id\n      );\n\n\n      // cart items\n      const cartItems = existItem\n        ? state.cart.cartItems.map((item) =>\n            item.name === existItem.name ? newItem : item\n          )\n        : [...state.cart.cartItems, newItem];\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\n\n      // keep all values in the field ...state\n      // keep all values in the Cart Object in the state ...state.cart\n      // update cartItems\n      return { ...state, cart: { ...state.cart, cartItems } };\n    }\n    case 'CART_REMOVE_ITEM': {\n      const cartItems = state.cart.cartItems.filter(\n        (item) => item._id !== action.payload._id\n      );\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\n      return { ...state, cart: { ...state.cart, cartItems } };\n    }\n    case 'SAVE_SHIPPING_ADDRESS':\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          shippingAddress: {\n            ...state.cart.shippingAddress,\n            ...action.payload,\n          },\n        },\n      };\n    case 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION':\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          shippingAddress: {\n            ...state.cart.shippingAddress,\n            location: action.payload,\n          },\n        },\n      };\n    case 'SAVE_PAYMENT_METHOD':\n      return {\n        ...state,\n        cart: { ...state.cart, paymentMethod: action.payload },\n      };\n    case 'CART_CLEAR':\n      return { ...state, cart: { ...state.cart, cartItems: [] } };\n    case 'USER_SIGNIN':\n      return { ...state, userInfo: action.payload };\n    case 'USER_SIGNOUT':\n      return {\n        ...state,\n        userInfo: null,\n        cart: {\n          cartItems: [],\n          shippingAddress: { location: {} },\n          paymentMethod: '',\n        },\n      };\n\n    default:\n      return state;\n  }\n}\n\n// StoreProvider - is a Wrapper for React App and pass global props to children\nexport function StoreProvider(props) {\n\n  // define useReducer\n  const [state, dispatch] = useReducer(\n    //process.env.NODE_ENV === 'development' ? logger(reducer) : reducer,\n    reducer,\n    initialState\n  );\n\n  // define value object\n  // the value contain current state in the context and \n  // the dispatch to update state in the context\n  const value = { state, dispatch };\n\n  // return Store ( is comming from react context )\n  // get Provider from the Store object\n  // render {props.children}\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}