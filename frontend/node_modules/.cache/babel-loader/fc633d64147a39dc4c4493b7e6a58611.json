{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Documents/GitHub/mern-ecommerce/frontend/src/screens/MapScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport Button from 'react-bootstrap/Button';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from '../Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libs = ['places'];\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nexport default function MapScreen() {\n  _s();\n\n  const {\n    state,\n    dispatch: ctxDispatch\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await Axios('/api/config/google');\n      console.log(data);\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      // dispatch select action\n      // ctxDispatch({\n      //   type: USER_ADDRESS_MAP_CONFIRM,\n      //   payload: {\n      //     lat: location.lat,\n      //     lng: location.lng,\n      //     address: places[0].formatted_address,\n      //     name: places[0].name,\n      //     vicinity: places[0].vicinity,\n      //     googleAddressId: places[0].id,\n      //   },\n      // });\n      alert('location selected successfully.');\n      navigate('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-container\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"smaple-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 15,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-input-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MapScreen, \"tH02IKR5jF0yL2d3j48WCjJosTQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = MapScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"sources":["/home/carlos/Documents/GitHub/mern-ecommerce/frontend/src/screens/MapScreen.js"],"names":["React","useContext","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","Button","LoadingBox","Axios","useNavigate","Store","libs","defaultLocation","lat","lng","MapScreen","state","dispatch","ctxDispatch","userInfo","navigate","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","console","log","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","onConfirm","places","length","alert","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\nimport {\n  LoadScript,\n  GoogleMap,\n  StandaloneSearchBox,\n  Marker,\n} from '@react-google-maps/api';\nimport Button from 'react-bootstrap/Button';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\n\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from '../Store';\n\nconst libs = ['places'];\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\n\n\nexport default function MapScreen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await Axios('/api/config/google');\n      console.log(data);\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n    fetch();\n  }, []);\n\n  const onLoad = (map) => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = (marker) => {\n    markerRef.current = marker;\n  };\n  const onLoadPlaces = (place) => {\n    placeRef.current = place;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng(),\n    });\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({ lat: place.lat(), lng: place.lng() });\n    setLocation({ lat: place.lat(), lng: place.lng() });\n  };\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n    if (places && places.length === 1) {\n      // dispatch select action\n      // ctxDispatch({\n      //   type: USER_ADDRESS_MAP_CONFIRM,\n      //   payload: {\n      //     lat: location.lat,\n      //     lng: location.lng,\n      //     address: places[0].formatted_address,\n      //     name: places[0].name,\n      //     vicinity: places[0].vicinity,\n      //     googleAddressId: places[0].id,\n      //   },\n      // });\n      alert('location selected successfully.');\n      navigate('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      });\n    }\n  };\n\n \n  return googleApiKey ? (\n    <div className=\"full-container\">\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n        <GoogleMap\n          id=\"smaple-map\"\n          mapContainerStyle={{ height: '100%', width: '100%' }}\n          center={center}\n          zoom={15}\n          onLoad={onLoad}\n          onIdle={onIdle}\n        >\n          <StandaloneSearchBox\n            onLoad={onLoadPlaces}\n            onPlacesChanged={onPlacesChanged}\n          >\n            <div className=\"map-input-box\">\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\n              <Button type=\"button\" onClick={onConfirm}>\n                Confirm\n              </Button>\n            </div>\n          </StandaloneSearchBox>\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  ) : (\n    <LoadingBox></LoadingBox>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}