{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Documents/GitHub/mern-app/frontend/src/screens/PaymentMethodScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useNavigate } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport { Store } from '../Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PaymentMethodScreen() {\n  _s();\n\n  // navigate - is commig from useNavigate hook \n  const navigate = useNavigate(); // get state and ctxDispatch from useContext\n\n  const {\n    state,\n    dispatch: ctxDispatch\n  } = useContext(Store); // get the shippingAddress and paymentMethod from cart in the state\n\n  const {\n    cart: {\n      shippingAddress,\n      paymentMethod\n    }\n  } = state;\n  useEffect(() => {\n    // if shippingAddress.addres does not exist\n    if (!shippingAddress.address) {\n      navigate('/shipping');\n    }\n  }, [shippingAddress, navigate] // define variables that we use in useEffect\n  ); // define state for paymentMethodName\n\n  const [paymentMethodName, setPaymentMethod] = useState(paymentMethod || 'PayPal'); // define submitHandler function\n\n  const submitHandler = e => {\n    // prevent refreshing the page\n    e.preventDefault(); // dispatch an action and pass an object\n\n    ctxDispatch({\n      type: 'SAVE_PAYMENT_METHOD',\n      // action type\n      payload: paymentMethodName // data from backend\n\n    }); // save user payment Method Name in a browser storage\n\n    localStorage.setItem('paymentMethod', paymentMethodName); // redirect user to the next step\n\n    navigate('/placeorder');\n  };\n\n  return;\n\n  /*#__PURE__*/\n  _jsxDEV(\"div\", {\n    children: \"payment\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PaymentMethodScreen, \"qVmthhOiil1SWQOt1aSYp0jtG8U=\", false, function () {\n  return [useNavigate];\n});\n\n_c = PaymentMethodScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentMethodScreen\");","map":{"version":3,"sources":["/home/carlos/Documents/GitHub/mern-app/frontend/src/screens/PaymentMethodScreen.js"],"names":["React","useContext","useState","useEffect","Helmet","useNavigate","Button","Form","CheckoutSteps","Store","PaymentMethodScreen","navigate","state","dispatch","ctxDispatch","cart","shippingAddress","paymentMethod","address","paymentMethodName","setPaymentMethod","submitHandler","e","preventDefault","type","payload","localStorage","setItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAEA,eAAe,SAASC,mBAAT,GACf;AAAA;;AAEE;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CAHF,CAKE;;AACA,QAAM;AAAEO,IAAAA,KAAF;AAASC,IAAAA,QAAQ,EAAEC;AAAnB,MAAmCb,UAAU,CAACQ,KAAD,CAAnD,CANF,CAQE;;AACA,QAAM;AAAEM,IAAAA,IAAI,EAAE;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB;AAAR,MAA+CL,KAArD;AAEAT,EAAAA,SAAS,CAAC,MACV;AACE;AACA,QAAI,CAACa,eAAe,CAACE,OAArB,EAA8B;AAC1BP,MAAAA,QAAQ,CAAC,WAAD,CAAR;AACH;AACF,GANQ,EAMP,CAACK,eAAD,EAAkBL,QAAlB,CANO,CAMqB;AANrB,GAAT,CAXF,CAoBE;;AACA,QAAM,CAACQ,iBAAD,EAAoBC,gBAApB,IAAwClB,QAAQ,CACpDe,aAAa,IAAI,QADmC,CAAtD,CArBF,CAyBE;;AACA,QAAMI,aAAa,GAAIC,CAAD,IACtB;AACE;AACAA,IAAAA,CAAC,CAACC,cAAF,GAFF,CAIE;;AACAT,IAAAA,WAAW,CAAC;AACRU,MAAAA,IAAI,EAAE,qBADE;AACqB;AAC7BC,MAAAA,OAAO,EAAEN,iBAFD,CAEqB;;AAFrB,KAAD,CAAX,CALF,CAUE;;AACAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCR,iBAAtC,EAXF,CAaE;;AACAR,IAAAA,QAAQ,CAAC,aAAD,CAAR;AACD,GAhBD;;AAkBA;;AACA;AACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD;;GAnFuBD,mB;UAILL,W;;;KAJKK,mB","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useNavigate } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport { Store } from '../Store';\n\nexport default function PaymentMethodScreen() \n{\n\n  // navigate - is commig from useNavigate hook \n  const navigate = useNavigate();\n\n  // get state and ctxDispatch from useContext\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n\n  // get the shippingAddress and paymentMethod from cart in the state\n  const { cart: { shippingAddress, paymentMethod } } = state;\n\n  useEffect(() => \n  {\n    // if shippingAddress.addres does not exist\n    if (!shippingAddress.address) {\n        navigate('/shipping');\n    }\n  },[shippingAddress, navigate] // define variables that we use in useEffect\n  );\n\n  // define state for paymentMethodName\n  const [paymentMethodName, setPaymentMethod] = useState(\n    paymentMethod || 'PayPal'\n  );\n\n  // define submitHandler function\n  const submitHandler = (e) => \n  {\n    // prevent refreshing the page\n    e.preventDefault();\n\n    // dispatch an action and pass an object\n    ctxDispatch({ \n        type: 'SAVE_PAYMENT_METHOD', // action type\n        payload: paymentMethodName   // data from backend\n    });\n\n    // save user payment Method Name in a browser storage\n    localStorage.setItem('paymentMethod', paymentMethodName);\n\n    // redirect user to the next step\n    navigate('/placeorder');\n  };\n\n  return \n  (\n    <div>\n        payment\n      {/* <CheckoutSteps step1 step2></CheckoutSteps>\n      <div className=\"container small-container\">\n        <Helmet>\n          <title>Payment Method</title>\n        </Helmet>\n        <h1 className=\"my-3\">Payment Method</h1>\n        <form onSubmit={submitHandler}>\n          <div className=\"mb-3\">\n            <Form.Check\n              type=\"radio\"\n              id=\"PayPal\"\n              label=\"PayPal\"\n              value=\"PayPal\"\n              checked={paymentMethodName === 'PayPal'}\n              onChange={(e) => setPaymentMethod(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <Form.Check\n              type=\"radio\"\n              id=\"Stripe\"\n              label=\"Stripe\"\n              value=\"Stripe\"\n              checked={paymentMethodName === 'Stripe'}\n              onChange={(e) => setPaymentMethod(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <Button type=\"submit\">Continue</Button>\n          </div>\n        </form>\n      </div> */}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}