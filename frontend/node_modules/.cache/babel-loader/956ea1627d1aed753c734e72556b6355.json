{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from 'react'; // import logger from 'use-reducer-logger';\n// i wanna use react context to save the cart items in a global state\n// and use it in Components\n// Create Store\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext(); // define initialState\n\nconst initialState = {// // cart: {\n  // //   cartItems: localStorage.getItem('cartItems')\n  // //     ? JSON.parse(localStorage.getItem('cartItems'))\n  // //     : [],\n  // //   shippingAddress: localStorage.getItem('shippingAddress')\n  // //     ? JSON.parse(localStorage.getItem('shippingAddress'))\n  // //     : { location: {} },\n  // //   paymentMethod: localStorage.getItem('paymentMethod')\n  // //     ? localStorage.getItem('paymentMethod')\n  // //     : '',\n  // // },\n  // // userInfo: localStorage.getItem('userInfo')\n  // //   ? JSON.parse(localStorage.getItem('userInfo'))\n  // //   : null,\n}; // define reducer\n\nfunction reducer(state, action) {// // switch (action.type) {\n  // //   case 'CART_ADD_ITEM': {\n  // //     // new item\n  // //     const newItem = action.payload;\n  // //     // exist item\n  // //     const existItem = state.cart.cartItems.find(\n  // //       (item) => item._id === newItem._id\n  // //     );\n  // //     // cart items\n  // //     const cartItems = existItem\n  // //       ? state.cart.cartItems.map((item) =>\n  // //           item.name === existItem.name ? newItem : item\n  // //         )\n  // //       : [...state.cart.cartItems, newItem];\n  // //     localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  // //     // keep all values in the field ...state\n  // //     // keep all values in the Cart Object in the state ...state.cart\n  // //     // update cartItems\n  // //     return { ...state, cart: { ...state.cart, cartItems } };\n  // //   }\n  // //   case 'CART_REMOVE_ITEM': {\n  // //     const cartItems = state.cart.cartItems.filter(\n  // //       (item) => item._id !== action.payload._id\n  // //     );\n  // //     localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  // //     return { ...state, cart: { ...state.cart, cartItems } };\n  // //   }\n  // //   case 'SAVE_SHIPPING_ADDRESS':\n  // //     return {\n  // //       ...state,\n  // //       cart: {\n  // //         ...state.cart,\n  // //         shippingAddress: {\n  // //           ...state.cart.shippingAddress,\n  // //           ...action.payload,\n  // //         },\n  // //       },\n  // //     };\n  // //   case 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION':\n  // //     return {\n  // //       ...state,\n  // //       cart: {\n  // //         ...state.cart,\n  // //         shippingAddress: {\n  // //           ...state.cart.shippingAddress,\n  // //           location: action.payload,\n  // //         },\n  // //       },\n  // //     };\n  // //   case 'SAVE_PAYMENT_METHOD':\n  // //     return {\n  // //       ...state,\n  // //       cart: { ...state.cart, paymentMethod: action.payload },\n  // //     };\n  // //   case 'CART_CLEAR':\n  // //     return { ...state, cart: { ...state.cart, cartItems: [] } };\n  // //   case 'USER_SIGNIN':\n  // //     return { ...state, userInfo: action.payload };\n  // //   case 'USER_SIGNOUT':\n  // //     return {\n  // //       ...state,\n  // //       userInfo: null,\n  // //       cart: {\n  // //         cartItems: [],\n  // //         shippingAddress: { location: {} },\n  // //         paymentMethod: '',\n  // //       },\n  // //     };\n  // //   default:\n  // //     return state;\n  // // }\n} // StoreProvider - is a Wrapper for React App and pass global props to children\n\n\nexport function StoreProvider(props) {\n  _s();\n\n  // define useReducer\n  const [state, dispatch] = useReducer( //process.env.NODE_ENV === 'development' ? logger(reducer) : reducer,\n  reducer, initialState); // define value object\n  // the value contain current state in the context and \n  // the dispatch to update state in the context\n\n  const value = {\n    state,\n    dispatch\n  }; // return Store ( is comming from react context )\n  // get Provider from the Store object\n  // render {props.children}\n\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"sources":["/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js"],"names":["createContext","useReducer","Store","initialState","reducer","state","action","StoreProvider","props","dispatch","value","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C,C,CACA;AAEA;AACA;AAEA;;;AACA,OAAO,MAAMC,KAAK,gBAAGF,aAAa,EAA3B,C,CAEP;;AACA,MAAMG,YAAY,GAAG,CACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdmB,CAArB,C,CAiBA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC,CAC9B;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,C,CAED;;;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAEnC;AACA,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBR,UAAU,EAClC;AACAG,EAAAA,OAFkC,EAGlCD,YAHkC,CAApC,CAHmC,CASnC;AACA;AACA;;AACA,QAAMO,KAAK,GAAG;AAAEL,IAAAA,KAAF;AAASI,IAAAA;AAAT,GAAd,CAZmC,CAcnC;AACA;AACA;;AACA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEC,KAAvB;AAAA,cAA+BF,KAAK,CAACG;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAlBeJ,a;;KAAAA,a","sourcesContent":["import { createContext, useReducer } from 'react';\n// import logger from 'use-reducer-logger';\n\n// i wanna use react context to save the cart items in a global state\n// and use it in Components\n\n// Create Store\nexport const Store = createContext();\n\n// define initialState\nconst initialState = {\n  // // cart: {\n  // //   cartItems: localStorage.getItem('cartItems')\n  // //     ? JSON.parse(localStorage.getItem('cartItems'))\n  // //     : [],\n  // //   shippingAddress: localStorage.getItem('shippingAddress')\n  // //     ? JSON.parse(localStorage.getItem('shippingAddress'))\n  // //     : { location: {} },\n  // //   paymentMethod: localStorage.getItem('paymentMethod')\n  // //     ? localStorage.getItem('paymentMethod')\n  // //     : '',\n  // // },\n  // // userInfo: localStorage.getItem('userInfo')\n  // //   ? JSON.parse(localStorage.getItem('userInfo'))\n  // //   : null,\n};\n\n// define reducer\nfunction reducer(state, action) {\n  // // switch (action.type) {\n  // //   case 'CART_ADD_ITEM': {\n\n  // //     // new item\n  // //     const newItem = action.payload;\n      \n\n  // //     // exist item\n  // //     const existItem = state.cart.cartItems.find(\n  // //       (item) => item._id === newItem._id\n  // //     );\n\n\n  // //     // cart items\n  // //     const cartItems = existItem\n  // //       ? state.cart.cartItems.map((item) =>\n  // //           item.name === existItem.name ? newItem : item\n  // //         )\n  // //       : [...state.cart.cartItems, newItem];\n  // //     localStorage.setItem('cartItems', JSON.stringify(cartItems));\n\n  // //     // keep all values in the field ...state\n  // //     // keep all values in the Cart Object in the state ...state.cart\n  // //     // update cartItems\n  // //     return { ...state, cart: { ...state.cart, cartItems } };\n  // //   }\n  // //   case 'CART_REMOVE_ITEM': {\n  // //     const cartItems = state.cart.cartItems.filter(\n  // //       (item) => item._id !== action.payload._id\n  // //     );\n  // //     localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  // //     return { ...state, cart: { ...state.cart, cartItems } };\n  // //   }\n  // //   case 'SAVE_SHIPPING_ADDRESS':\n  // //     return {\n  // //       ...state,\n  // //       cart: {\n  // //         ...state.cart,\n  // //         shippingAddress: {\n  // //           ...state.cart.shippingAddress,\n  // //           ...action.payload,\n  // //         },\n  // //       },\n  // //     };\n  // //   case 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION':\n  // //     return {\n  // //       ...state,\n  // //       cart: {\n  // //         ...state.cart,\n  // //         shippingAddress: {\n  // //           ...state.cart.shippingAddress,\n  // //           location: action.payload,\n  // //         },\n  // //       },\n  // //     };\n  // //   case 'SAVE_PAYMENT_METHOD':\n  // //     return {\n  // //       ...state,\n  // //       cart: { ...state.cart, paymentMethod: action.payload },\n  // //     };\n  // //   case 'CART_CLEAR':\n  // //     return { ...state, cart: { ...state.cart, cartItems: [] } };\n  // //   case 'USER_SIGNIN':\n  // //     return { ...state, userInfo: action.payload };\n  // //   case 'USER_SIGNOUT':\n  // //     return {\n  // //       ...state,\n  // //       userInfo: null,\n  // //       cart: {\n  // //         cartItems: [],\n  // //         shippingAddress: { location: {} },\n  // //         paymentMethod: '',\n  // //       },\n  // //     };\n\n  // //   default:\n  // //     return state;\n  // // }\n}\n\n// StoreProvider - is a Wrapper for React App and pass global props to children\nexport function StoreProvider(props) {\n\n  // define useReducer\n  const [state, dispatch] = useReducer(\n    //process.env.NODE_ENV === 'development' ? logger(reducer) : reducer,\n    reducer,\n    initialState\n  );\n\n  // define value object\n  // the value contain current state in the context and \n  // the dispatch to update state in the context\n  const value = { state, dispatch };\n\n  // return Store ( is comming from react context )\n  // get Provider from the Store object\n  // render {props.children}\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}