{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport { CreateContext } from 'react'; //# Create React Context -use React Context to save Cart Items \n// in a Global State and use it in Components\n// #1 - Create Store\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = CreateContext(); // define Initial State\n\nconst initialState = {\n  cart: {\n    cartItems: [] // by default there is no items in the shopping cart\n\n  }\n}; // define reducer\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CART_ADD_ITEM':\n      //Add to Cart\n      return { ...state,\n        // keep all values in the field\n        cart: { ...state.cart,\n          // keep all values in the cart object\n          // only update cart items\n          cartItems: [...state.cart.cartItems, // keep previous items in the cart\n          action.payload // add the new item\n          ]\n        }\n      };\n\n    default:\n      return state;\n  }\n} // #2 - Store Provider - it's a Wrapper for our React Application\n// pass global props to children\n\n\nexport function StoreProvider(props) {\n  _s();\n\n  // define useReducer\n  const [state, dispatch] = useReducer(reudcer, initialState); //define value object\n\n  const value = {\n    state,\n    // current state\n    dispatch // action to update state in the context\n\n  };\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 12\n  }, this);\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"sources":["/home/carlos/Documents/GitHub/mern-app/frontend/src/Store.js"],"names":["CreateContext","Store","initialState","cart","cartItems","reducer","state","action","type","payload","StoreProvider","props","dispatch","useReducer","reudcer","value","children"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B,C,CAEA;AACA;AAGA;;;AACA,OAAO,MAAMC,KAAK,GAAGD,aAAa,EAA3B,C,CAEP;;AACA,MAAME,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAG,EADV,CACc;;AADd;AADW,CAArB,C,CAMA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAC3B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI;AACA,aAAO,EACH,GAAGF,KADA;AACO;AACVH,QAAAA,IAAI,EAAE,EACF,GAAGG,KAAK,CAACH,IADP;AACa;AACf;AACAC,UAAAA,SAAS,EAAC,CACN,GAAGE,KAAK,CAACH,IAAN,CAAWC,SADR,EACmB;AACzBG,UAAAA,MAAM,CAACE,OAFD,CAES;AAFT;AAHR;AAFH,OAAP;;AAWJ;AACI,aAAOH,KAAP;AAfR;AAiBH,C,CAED;AACA;;;AACA,OAAO,SAASI,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AAChC;AACA,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBC,UAAU,CAACC,OAAD,EAAUZ,YAAV,CAApC,CAFgC,CAIhC;;AACA,QAAMa,KAAK,GAAG;AACVT,IAAAA,KADU;AACH;AACPM,IAAAA,QAFU,CAED;;AAFC,GAAd;AAKA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEG,KAAvB;AAAA,cACFJ,KAAK,CAACK;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH;;GAbeN,a;;KAAAA,a","sourcesContent":["import { CreateContext } from 'react';\n\n//# Create React Context -use React Context to save Cart Items \n// in a Global State and use it in Components\n\n\n// #1 - Create Store\nexport const Store = CreateContext()\n\n// define Initial State\nconst initialState = {\n    cart: {\n        cartItems : [], // by default there is no items in the shopping cart\n    }\n}\n\n// define reducer\nfunction reducer(state, action){\n    switch(action.type){\n        case 'CART_ADD_ITEM':\n            //Add to Cart\n            return {\n                ...state, // keep all values in the field\n                cart: {\n                    ...state.cart, // keep all values in the cart object\n                    // only update cart items\n                    cartItems:[\n                        ...state.cart.cartItems, // keep previous items in the cart\n                        action.payload // add the new item\n                    ]\n                }\n            }\n        default:\n            return state;\n    }\n}\n\n// #2 - Store Provider - it's a Wrapper for our React Application\n// pass global props to children\nexport function StoreProvider(props){\n    // define useReducer\n    const [state, dispatch] = useReducer(reudcer, initialState);\n\n    //define value object\n    const value = {\n        state, // current state\n        dispatch // action to update state in the context\n    };\n\n    return <Store.Provider value={value}>\n        {props.children}\n    </Store.Provider>\n}"]},"metadata":{},"sourceType":"module"}